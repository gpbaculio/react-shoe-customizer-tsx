/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { proxy, useSnapshot } from "valtio";
import { Mesh, MeshStandardMaterial } from "three";
import { useFrame } from "@react-three/fiber";

export const state = proxy<{
  current: null | string;
  items: {
    laces: string;
    mesh: string;
    caps: string;
    inner: string;
    sole: string;
    stripes: string;
    band: string;
    patch: string;
  };
}>({
  current: null,
  items: {
    laces: "#ffffff",
    mesh: "#ffffff",
    caps: "#ffffff",
    inner: "#ffffff",
    sole: "#ffffff",
    stripes: "#ffffff",
    band: "#ffffff",
    patch: "#ffffff",
  },
});
export default function Model({ ...props }: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const snap = useSnapshot(state);
  const { nodes, materials } = useGLTF("/shoe-draco.glb") as GLTFResult;
  const [hovered, setHovered] = useState<null | string>(null);
  // Animate model
  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    if (group && group.current) {
      group.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20;
      group.current.rotation.x = Math.cos(t / 4) / 8;
      group.current.rotation.y = Math.sin(t / 4) / 8;
      group.current.position.y = (1 + Math.sin(t / 1.5)) / 10;
    }
  });
  useEffect(() => {
    const cursor = `<svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0)"><path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/><g filter="url(#filter0_d)"><path d="M29.5 47C39.165 47 47 39.165 47 29.5S39.165 12 29.5 12 12 19.835 12 29.5 19.835 47 29.5 47z" fill="${
      snap.items[hovered as keyof typeof snap.items]
    }"/></g><path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/><text fill="#000" style="white-space:pre" font-family="Inter var, sans-serif" font-size="10" letter-spacing="-.01em"><tspan x="35" y="63">${hovered}</tspan></text></g><defs><clipPath id="clip0"><path fill="#fff" d="M0 0h64v64H0z"/></clipPath><filter id="filter0_d" x="6" y="8" width="47" height="47" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feFlood flood-opacity="0" result="BackgroundImageFix"/><feColorMatrix in="SourceAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/><feOffset dy="2"/><feGaussianBlur stdDeviation="3"/><feColorMatrix values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/><feBlend in2="BackgroundImageFix" result="effect1_dropShadow"/><feBlend in="SourceGraphic" in2="effect1_dropShadow" result="shape"/></filter></defs></svg>`;
    const auto = `<svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/><path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/></svg>`;
    if (hovered) {
      document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(
        cursor
      )}'), auto`;
      return () => {
        document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(
          auto
        )}'), auto`;
      };
    }
  }, [hovered, snap]);
  return (
    <>
      <group
        ref={group}
        {...props}
        dispose={null}
        onPointerOver={(e) => {
          e.stopPropagation();
          setHovered(
            ((e.object as Mesh).material as MeshStandardMaterial).name
          );
        }}
        onPointerOut={(e) => {
          if (e.intersections.length === 0) {
            setHovered(null);
          }
        }}
        onPointerDown={(e) => {
          e.stopPropagation();
          state.current = (
            (e.object as Mesh).material as MeshStandardMaterial
          ).name;
        }}
        onPointerMissed={() => {
          state.current = null;
        }}>
        <mesh
          material-color={snap.items.laces}
          geometry={nodes.shoe.geometry}
          material={materials.laces}
        />
        <mesh
          material-color={snap.items.mesh}
          geometry={nodes.shoe_1.geometry}
          material={materials.mesh}
        />
        <mesh
          material-color={snap.items.caps}
          geometry={nodes.shoe_2.geometry}
          material={materials.caps}
        />
        <mesh
          material-color={snap.items.inner}
          geometry={nodes.shoe_3.geometry}
          material={materials.inner}
        />
        <mesh
          material-color={snap.items.sole}
          geometry={nodes.shoe_4.geometry}
          material={materials.sole}
        />
        <mesh
          material-color={snap.items.stripes}
          geometry={nodes.shoe_5.geometry}
          material={materials.stripes}
        />
        <mesh
          material-color={snap.items.band}
          geometry={nodes.shoe_6.geometry}
          material={materials.band}
        />
        <mesh
          material-color={snap.items.patch}
          geometry={nodes.shoe_7.geometry}
          material={materials.patch}
        />
      </group>
    </>
  );
}

useGLTF.preload("/shoe-draco.glb");

type GLTFResult = GLTF & {
  nodes: {
    shoe: THREE.Mesh;
    shoe_1: THREE.Mesh;
    shoe_2: THREE.Mesh;
    shoe_3: THREE.Mesh;
    shoe_4: THREE.Mesh;
    shoe_5: THREE.Mesh;
    shoe_6: THREE.Mesh;
    shoe_7: THREE.Mesh;
  };
  materials: {
    laces: THREE.MeshStandardMaterial;
    mesh: THREE.MeshStandardMaterial;
    caps: THREE.MeshStandardMaterial;
    inner: THREE.MeshStandardMaterial;
    sole: THREE.MeshStandardMaterial;
    stripes: THREE.MeshStandardMaterial;
    band: THREE.MeshStandardMaterial;
    patch: THREE.MeshStandardMaterial;
  };
};
